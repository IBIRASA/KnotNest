
name: CI Pipeline

on:
  push:
    branches:
      - main   # Trigger CD on a push to the 'main' branch.
  pull_request:
    branches:
      - main   # Trigger CD when merging a PR into 'main'.

jobs:
  build:
    name: Build Docker Images and Run Tests
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout the repository code
      - uses: actions/checkout@v3

      # 2. Set up Python for the backend
      - name: Set up Python (Backend)
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # 3. Install backend dependencies
      - name: Install backend dependencies
        run: |
          cd backend
          pip install -r requirements.txt

      # 4. Run backend tests
      - name: Run backend tests
        run: |
          cd backend
          python manage.py test

      # 5. Set up Node.js for the frontend
      - name: Set up Node.js (Frontend)
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 6. Install frontend dependencies
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      # 7. Run frontend tests
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --ci --watchAll=false

  security-scan:
    name: Run Security Scans
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 1. Checkout the repository code
      - uses: actions/checkout@v3

      # 2. Run security scan for Python dependencies
      - name: Security Scan for Backend (Python)
        run: |
          cd backend
          pip install pip-audit
          pip-audit

      # 3. Run security scan for frontend dependencies
      - name: Security Scan for Frontend (Node)
        run: |
          cd frontend
          npm audit --audit-level=moderate || true

      # 4. Scan Docker images with Trivy
      - name: Container Image Security Scan with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'your-dockerhub-user/your-image-name:latest'

  docker-build-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [build, security-scan]

    steps:
      # 1. Checkout the repository code
      - uses: actions/checkout@v3

      # 2. Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # 3. Log in to DockerHub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 4. Build Docker images for backend and frontend
      - name: Build Docker image for Backend
        run: |
          docker build -t your-dockerhub-user/knotnest-backend:latest ./backend

      - name: Build Docker image for Frontend
        run: |
          docker build -t your-dockerhub-user/knotnest-frontend:latest ./frontend

      # 5. Push Docker images to DockerHub
      - name: Push Docker image for Backend
        run: |
          docker push your-dockerhub-user/knotnest-backend:latest

      - name: Push Docker image for Frontend
        run: |
          docker push your-dockerhub-user/knotnest-frontend:latest

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: docker-build-push

    steps:
      # 1. Checkout the repository code
      - uses: actions/checkout@v3

      # 2. Deploy to Fly.io (or another cloud provider like Render or Railway)
      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl auth token $FLY_API_TOKEN
          flyctl deploy --app your-app-name --image your-dockerhub-user/knotnest-backend:latest
          flyctl deploy --app your-app-name --image your-dockerhub-user/knotnest-frontend:latest

