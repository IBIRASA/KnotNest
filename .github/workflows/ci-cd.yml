name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: [main, develop]
    paths:
      - 'vow-venue-frontend/**'
      - 'vowvenue_backend/**'
      - '.github/workflows/ci-cd.yml'
  pull_request:
    branches: [main]

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ad5c80fb-4e68-4158-90c5-60e23c034e76
  VERSION: ${{ github.sha }}
  RESOURCE_GROUP: knotnest-rg
  FRONTEND_APP: knot-frontend
  BACKEND_APP: knot-backend

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate CHANGELOG
        run: |
          mkdir -p ./artifacts
          echo "## $(date +'%Y-%m-%d') - Version ${VERSION:0:7}" > ./artifacts/CHANGELOG.md
          echo "### Changes" >> ./artifacts/CHANGELOG.md
          git log --pretty=format:"- %s (%h)" --reverse HEAD^..HEAD >> ./artifacts/CHANGELOG.md
          echo "" >> ./artifacts/CHANGELOG.md

      - name: Upload CHANGELOG
        uses: actions/upload-artifact@v4
        with:
          name: CHANGELOG
          path: ./artifacts/CHANGELOG.md
          retention-days: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./vowvenue_backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        working-directory: ./vowvenue_backend
        run: python manage.py test

      - name: Backend security scan
        working-directory: ./vowvenue_backend
        run: |
          pip install safety
          safety check -r requirements.txt --output-file ./artifacts/safety-report.json || true
        continue-on-error: true

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'vow-venue-frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./vow-venue-frontend
        run: |
          if [ ! -f "package-lock.json" ]; then
            npm install --package-lock-only
          fi
          npm ci

      - name: Run frontend tests
        working-directory: ./vow-venue-frontend
        run: npm test -- --watchAll=false --ci

      - name: Frontend security scan
        working-directory: ./vow-venue-frontend
        run: npm audit --audit-level=high --json > ./artifacts/npm-audit.json || true
        continue-on-error: true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: ./artifacts/*.json
          retention-days: 1
          if-no-files-found: warn

      - name: Set up Docker
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true

      - name: Login to ACR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push backend
        uses: docker/build-push-action@v5
        with:
          context: ./vowvenue_backend
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_APP }}:${{ env.VERSION }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_APP }}:latest
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_APP }}:buildcache
          cache-to: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_APP }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./vow-venue-frontend
          push: true
          tags: |
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_APP }}:${{ env.VERSION }}
            ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_APP }}:latest
          cache-from: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_APP }}:buildcache
          cache-to: type=registry,ref=${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_APP }}:buildcache,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

  deploy-production:
    needs: build-test-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ toJson(fromJson(secrets.AZURE_CREDENTIALS)) }}
          enable-AzPSSession: true

      - name: Deploy backend
        run: |
          az containerapp update \
            --name ${{ env.BACKEND_APP }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.BACKEND_APP }}:${{ env.VERSION }} \
            --cpu 0.5 \
            --memory 1.0Gi \
            --query "{name:name, image:properties.template.containers[0].image, state:properties.provisioningState}"

      - name: Deploy frontend
        run: |
          az containerapp update \
            --name ${{ env.FRONTEND_APP }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/${{ env.FRONTEND_APP }}:${{ env.VERSION }} \
            --cpu 0.5 \
            --memory 1.0Gi \
            --query "{name:name, image:properties.template.containers[0].image, state:properties.provisioningState}"

      - name: Verify deployments
        run: |
          az containerapp revision list \
            --name ${{ env.FRONTEND_APP }} \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "[].{revision:name, image:properties.template.containers[0].image, active:properties.active, createdTime:properties.createdTime}" \
            --output table
  create-release:
    needs: deploy-production
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Get timestamp
        id: timestamp
        run: |
          echo "RELEASE_DATE=$(date -u +'%Y%m%d-%H%M%S')" >> $GITHUB_ENV
          echo "RELEASE_NAME=$(date -u +'%Y-%m-%d %H:%M')" >> $GITHUB_ENV

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./release-artifacts
          pattern: '*'
          merge-multiple: true

      - name: Verify artifacts exist
        run: |
          mkdir -p ./release-artifacts
          [ -f "./release-artifacts/CHANGELOG.md" ] || echo "## Release Notes\nNo changelog available" > ./release-artifacts/CHANGELOG.md
          [ -f "./release-artifacts/safety-report.json" ] || echo "{}" > ./release-artifacts/safety-report.json
          [ -f "./release-artifacts/npm-audit.json" ] || echo "{}" > ./release-artifacts/npm-audit.json

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: release-${{ env.RELEASE_DATE }}
          name: Release ${{ env.RELEASE_NAME }}
          bodyFile: ./release-artifacts/CHANGELOG.md
          artifacts: './release-artifacts/*.json'
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          prerelease: false