name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mydb
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Backend Dependencies
        working-directory: vowvenue_backend
        run: pip install -r requirements.txt

      - name: Wait for Database to be Ready
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for database to be ready..."
            sleep 2
          done

      - name: Run Backend Tests
        working-directory: vowvenue_backend
        env:
          DATABASE_URL: postgres://postgres:postgres@postgres:5432/mydb
        run: python manage.py test

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install Frontend Dependencies
        working-directory: vow-venue-frontend
        run: npm install

      - name: Run Frontend Tests
        working-directory: vow-venue-frontend
        run: npm test -- --watchAll=false

      - name: Scan for Vulnerabilities (Frontend)
        working-directory: vow-venue-frontend
        run: npm audit --audit-level=high || true

      - name: Scan for Vulnerabilities (Backend)
        working-directory: vowvenue_backend
        run: |
          pip install safety
          safety check || true

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image (Frontend)
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/vowvenue-frontend:latest ./vow-venue-frontend

      - name: Build Docker Image (Backend)
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/vowvenue-backend:latest ./vowvenue_backend

      - name: Push Docker Images to Docker Hub
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/vowvenue-frontend:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/vowvenue-backend:latest

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Run Trivy Scan (Non-blocking)
        run: trivy image --severity HIGH ${{ secrets.DOCKER_USERNAME }}/vowvenue-backend:latest || true

      - name: Save Trivy Report
        run: trivy image --severity HIGH --format json -o trivy-report.json ${{ secrets.DOCKER_USERNAME }}/vowvenue-backend:latest || true

      - name: Upload Trivy Report
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Production (Using Azure CLI)
        run: |
          az vm run-command invoke \
            --resource-group knotnest-rg \
            --name knotnest-vm \
            --command-id RunShellScript \
            --scripts "
              cd /home/azureuser || exit 1

              if [ ! -d KnotNest ]; then
                git clone https://github.com/IBIRASA/KnotNest.git
              fi

              cd KnotNest
              git reset --hard HEAD
              git clean -fd
              git pull origin main

              docker-compose down
              docker-compose pull
              docker-compose up -d --force-recreate
            "

      - name: Log out from Docker Hub
        run: docker logout
