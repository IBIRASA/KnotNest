name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  VERSION: ${{ github.sha }}
  RESOURCE_GROUP: knotnest-rg

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate CHANGELOG
        run: |
          echo "## $(date +'%Y-%m-%d') - Version ${VERSION:0:7}" >> CHANGELOG.md
          git log --pretty=format:"- %s" --reverse >> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd vowvenue_backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd vowvenue_backend
          python manage.py test

      - name: Dependency vulnerability scan (backend)
        run: |
          pip install safety
          safety check -r vowvenue_backend/requirements.txt --output-file safety-report.json
        continue-on-error: true

      - name: Upload backend security report
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-report
          path: safety-report.json
        if: always()

      - name: Install frontend dependencies
        run: |
          cd vow-venue-frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd vow-venue-frontend
          npm test -- --watchAll=false

      - name: Dependency vulnerability scan (frontend)
        run: |
          cd vow-venue-frontend
          npm audit --audit-level=high --json > npm-audit.json
        continue-on-error: true

      - name: Upload frontend security report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-report
          path: vow-venue-frontend/npm-audit.json
        if: always()

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend image
        run: docker build -t $DOCKER_USERNAME/knot-backend:$VERSION ./vowvenue_backend

      - name: Build frontend image
        run: docker build -t $DOCKER_USERNAME/knot-frontend:$VERSION ./vow-venue-frontend

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | gpg --dearmor | sudo tee /usr/share/keyrings/trivy.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/trivy.gpg] https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Scan backend image
        run: |
          docker save $DOCKER_USERNAME/knot-backend:$VERSION -o backend-image.tar
          trivy image --input backend-image.tar \
            --format sarif \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --vuln-type os,library \
            --output trivy-backend-results.sarif
          rm backend-image.tar
        continue-on-error: true

      - name: Scan frontend image
        run: |
          docker save $DOCKER_USERNAME/knot-frontend:$VERSION -o frontend-image.tar
          trivy image --input frontend-image.tar \
            --format sarif \
            --severity CRITICAL,HIGH \
            --ignore-unfixed \
            --vuln-type os,library \
            --output trivy-frontend-results.sarif
          rm frontend-image.tar
        continue-on-error: true

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif
        if: always()

      - name: Push backend image
        run: |
          docker push $DOCKER_USERNAME/knot-backend:$VERSION
          docker tag $DOCKER_USERNAME/knot-backend:$VERSION $DOCKER_USERNAME/knot-backend:latest
          docker push $DOCKER_USERNAME/knot-backend:latest

      - name: Push frontend image
        run: |
          docker push $DOCKER_USERNAME/knot-frontend:$VERSION
          docker tag $DOCKER_USERNAME/knot-frontend:$VERSION $DOCKER_USERNAME/knot-frontend:latest
          docker push $DOCKER_USERNAME/knot-frontend:latest

  deploy-production:
    needs: build-test-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Azure Subscription
        run: |
          az account set --subscription ${{ env.AZURE_SUBSCRIPTION_ID }}
          az account show

      - name: Deploy Backend to Azure Container App
        run: |
          az containerapp update \
            --name knot-backend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/knot-backend:${{ env.VERSION }} \
            --cpu 0.5 \
            --memory 1.0Gi

      - name: Deploy Frontend to Azure Container App
        run: |
          az containerapp update \
            --name knot-frontend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/knot-frontend:${{ env.VERSION }} \
            --cpu 0.5 \
            --memory 1.0Gi
  post-deployment-verification:
    
    needs: deploy-production
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Upload CHANGELOG
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
