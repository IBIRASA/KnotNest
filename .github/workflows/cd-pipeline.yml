name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  VERSION: ${{ github.sha }}
  RESOURCE_GROUP: knotnest-rg

jobs:
  build-test-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate CHANGELOG
        run: |
          echo "## $(date +'%Y-%m-%d') - Version ${VERSION:0:7}" >> CHANGELOG.md
          git log --pretty=format:"- %s" --reverse >> CHANGELOG.md
          echo "" >> CHANGELOG.md

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install backend dependencies
        run: |
          cd vowvenue_backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run backend tests
        run: |
          cd vowvenue_backend
          python manage.py test
        if: success()

      - name: Dependency vulnerability scan (backend)
        run: |
          pip install safety
          safety check -r vowvenue_backend/requirements.txt --output-file safety-report.json
        continue-on-error: true

      - name: Upload backend security report
        uses: actions/upload-artifact@v4
        with:
          name: backend-security-report
          path: safety-report.json
        if: always()

      - name: Install frontend dependencies
        run: |
          cd vow-venue-frontend
          npm ci

      - name: Run frontend tests
        run: |
          cd vow-venue-frontend
          npm test -- --watchAll=false
        if: success()

      - name: Dependency vulnerability scan (frontend)
        run: |
          cd vow-venue-frontend
          npm audit --audit-level=high --json > npm-audit.json
        continue-on-error: true

      - name: Upload frontend security report
        uses: actions/upload-artifact@v4
        with:
          name: frontend-security-report
          path: vow-venue-frontend/npm-audit.json
        if: always()

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build backend image
        run: docker build -t $DOCKER_USERNAME/knot-backend:$VERSION ./vowvenue_backend
        if: success()

      - name: Scan backend image
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: $DOCKER_USERNAME/knot-backend:$VERSION
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: 'sarif'
          output: trivy-backend-results.sarif
          ignore-unfixed: true
        if: success()

      - name: Build frontend image
        run: docker build -t $DOCKER_USERNAME/knot-frontend:$VERSION ./vow-venue-frontend
        if: success()

      - name: Scan frontend image
        uses: aquasecurity/trivy-action@0.19.0
        with:
          image-ref: $DOCKER_USERNAME/knot-frontend:$VERSION
          severity: 'CRITICAL,HIGH'
          exit-code: '1'
          format: 'sarif'
          output: trivy-frontend-results.sarif
          ignore-unfixed: true
        if: success()

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-scan-results
          path: |
            trivy-backend-results.sarif
            trivy-frontend-results.sarif
        if: always()

      - name: Push backend image
        run: |
          docker push $DOCKER_USERNAME/knot-backend:$VERSION
          docker tag $DOCKER_USERNAME/knot-backend:$VERSION $DOCKER_USERNAME/knot-backend:latest
          docker push $DOCKER_USERNAME/knot-backend:latest
        if: success()

      - name: Push frontend image
        run: |
          docker push $DOCKER_USERNAME/knot-frontend:$VERSION
          docker tag $DOCKER_USERNAME/knot-frontend:$VERSION $DOCKER_USERNAME/knot-frontend:latest
          docker push $DOCKER_USERNAME/knot-frontend:latest
        if: success()

  deploy-production:
    needs: build-test-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Azure CLI
        uses: azure/setup-azure-cli@v2

      - name: Azure Login using Service Principal
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Set Azure Subscription
        run: az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy Backend to Azure Container App
        run: |
          az containerapp update \
            --name knot-backend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $DOCKER_USERNAME/knot-backend:$VERSION \
            --cpu 0.5 \
            --memory 1.0Gi

      - name: Deploy Frontend to Azure Container App
        run: |
          az containerapp update \
            --name knot-frontend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image $DOCKER_USERNAME/knot-frontend:$VERSION \
            --cpu 0.5 \
            --memory 1.0Gi

      - name: Setup Azure Monitor Alerts
        run: |
          # Create availability alert for backend
          az monitor metrics alert create \
            --name "BackendAvailabilityAlert" \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.App/containerApps/knot-backend" \
            --condition "avg requests.count < 1 where httpStatusCode == '200' for 5m" \
            --description "Backend availability dropped below threshold" \
            --severity 2

          # Create error rate alert for frontend
          az monitor metrics alert create \
            --name "FrontendErrorAlert" \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --scopes "/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/${{ env.RESOURCE_GROUP }}/providers/Microsoft.App/containerApps/knot-frontend" \
            --condition "count http.status_code >= 500 for 5m" \
            --description "Frontend error rate exceeded threshold" \
            --severity 1

  post-deployment-verification:
    needs: deploy-production
    runs-on: ubuntu-latest
    steps:
      - name: Check Backend Health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://knot-backend.ashysea-fcb2b410.eastus.azurecontainerapps.io/health)
          if [ "$response" -ne 200 ]; then
            echo "Backend health check failed with status $response"
            exit 1
          fi

      - name: Check Frontend Health
        run: |
          response=$(curl -s -o /dev/null -w "%{http_code}" https://knot-frontend.ashysea-fcb2b410.eastus.azurecontainerapps.io)
          if [ "$response" -ne 200 ]; then
            echo "Frontend health check failed with status $response"
            exit 1
          fi

      - name: Upload CHANGELOG
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
