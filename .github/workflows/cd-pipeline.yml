name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main

env:
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  ACR_LOGIN_SERVER: ${{ secrets.ACR_LOGIN_SERVER }} # Make sure this secret exists
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  VERSION: ${{ github.sha }}
  RESOURCE_GROUP: knotnest-rg

jobs:
  # [Previous build-test-scan job remains exactly the same]
  # ... keep all existing build-test-scan steps ...

  deploy-production:
    needs: build-test-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Azure CLI
        run: |
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          az --version

      - name: Azure Login
        run: |
          az login --service-principal \
            -u ${{ secrets.AZURE_CLIENT_ID }} \
            -p ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}
          az account set --subscription ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          az account show

      - name: Deploy Backend to Azure Container App
        run: |
          az containerapp update \
            --name knot-backend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/knot-backend:${{ env.VERSION }} \
            --cpu 0.5 \
            --memory 1.0Gi

      - name: Deploy Frontend to Azure Container App
        run: |
          az containerapp update \
            --name knot-frontend \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --image ${{ env.ACR_LOGIN_SERVER }}/knot-frontend:${{ env.VERSION }} \
            --cpu 0.5 \
            --memory 1.0Gi
  post-deployment-verification:
    needs: deploy-production
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Verify deployment
        run: |
          echo "Deployment verification would go here"
          # This creates a success status when the job completes
        if: success()

      - name: Upload CHANGELOG
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
